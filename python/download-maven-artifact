#!/usr/bin/env python

from lxml import etree
from urllib2 import Request, urlopen, URLError, HTTPError
import os
import base64
import hashlib
import sys
import getopt

__doc__ = """
   Usage:
   %(program_name)s <options> Maven-Coordinate filename
   Options:
     -m <url> --maven-server=<url>     
     -u username
     -p password     
   Maven-Coordinate are defined by: http://maven.apache.org/pom.html#Maven_Coordinates
      The possible options are:
      - groupId:artifactId:version
      - groupId:artifactId:packaging:version
      - groupId:artifactId:packaging:classifier:version
   If you want to have a specific extension (for example "war") you should type :
      - groupId:artifactId:extension:packaging

    filename is optional. If not supplied the filename will be <artifactId>.<extension>

   Example:
     %(program_name)s "org.apache.solr:solr:war:3.5.0"
  """


class Artifact(object):
    def __init__(self, group_id, artifact_id, version, classifier=None, extension=None):
        if not group_id:
            raise ValueError("group_id must be set")
        if not artifact_id:
            raise ValueError("artifact_id must be set")

        self.group_id = group_id
        self.artifact_id = artifact_id
        self.version = version
        self.classifier = classifier
        if not extension:
            self.extension = "jar"
        else:
            self.extension = extension

    def is_snapshot(self):
        return self.version.endswith("SNAPSHOT")

    def path(self, with_version=True):
        base = self.group_id.replace(".", "/") + "/" + self.artifact_id
        if with_version:
            return base + "/" + self.version
        else:
            return base

    def _generate_filename(self):
        if not self.classifier:
            return self.artifact_id + "." + self.extension
        else:
            return self.artifact_id + "-" + self.classifier + "." + self.extension

    def get_filename(self, filename=None):
        if not filename:
            filename = self._generate_filename()
        elif os.path.isdir(filename):
            filename = os.path.join(filename, self._generate_filename())
        return filename

    def __str__(self):
        if self.classifier:
            return "%s:%s:%s:%s:%s" % (self.group_id, self.artifact_id, self.extension, self.classifier, self.version)
        elif self.extension != "jar":
            return "%s:%s:%s:%s" % (self.group_id, self.artifact_id, self.extension, self.version)
        else:
            return "%s:%s:%s" % (self.group_id, self.artifact_id, self.version)

    @staticmethod
    def parse(input):
        parts = input.split(":")
        if len(parts) >= 3:
            g = parts[0]
            a = parts[1]
            v = parts[len(parts) - 1]
            t = None
            c = None
            if len(parts) == 4:
                t = parts[2]
            if len(parts) == 5:
                t = parts[2]
                c = parts[3]
            return Artifact(g, a, v, c, t)
        else:
            return None


class MavenDownloader:
    def __init__(self, base="http://repo1.maven.org/maven2", username = None, password = None):
        if base.endswith("/"):
            base = base.rstrip("/")
        self.base = base
        self.username = username
        self.password = password
        self.user_agent = "Maven Artifact Downloader/1.0"

    def _find_latest_version_available(self, artifact):
        path = "/%s/maven-metadata.xml" % (artifact.path(False))
        xml = self._request(self.base + path, "Failed to download maven-metadata.xml", lambda r: etree.parse(r))
        v = xml.xpath("/metadata/versioning/versions/version[last()]/text()")
        if v:
            return v[0]

    def find_uri_for_artifact(self, artifact):
        if artifact.is_snapshot():
            path = "/%s/maven-metadata.xml" % (artifact.path())
            print("result for find_uri_for_artefact : " + str(self.base + path))
            xml = self._request(self.base + path, "Failed to download maven-metadata.xml", lambda r: etree.parse(r))
            basexpath = "/metadata/versioning/"
            p = xml.xpath(basexpath + "/snapshotVersions/snapshotVersion")
            if p:
                return self._find_matching_artifact(p, artifact)
        else:
            return self._uri_for_artifact(artifact)

    def _find_matching_artifact(self, elems, artifact):
        filtered = filter(lambda e: e.xpath("extension/text() = '%s'" % artifact.extension), elems)
        print("searching for extenstion : " + str(artifact.extension))
        if artifact.classifier:
            filtered = filter(lambda e: e.xpath("classifier/text() = '%s'" % artifact.classifier), elems)

        if len(filtered) > 1:
            print(
            "There was more than one match. Selecting the first one. Try adding a classifier to get a better match.")
        elif not len(filtered):
            print("There were no matches.")
            return None

        elem = filtered[0]
        value = elem.xpath("value/text()")
        return self._uri_for_artifact(artifact, value[0])

    def _uri_for_artifact(self, artifact, version=None):
        if artifact.is_snapshot() and not version:
            raise ValueError("Expected uniqueversion for snapshot artifact " + str(artifact))
        elif not artifact.is_snapshot():
            version = artifact.version
        if artifact.classifier:
            return self.base + "/" + artifact.path() + "/" + artifact.artifact_id + "-" + version + "-" + artifact.classifier + "." + artifact.extension
        return self.base + "/" + artifact.path() + "/" + artifact.artifact_id + "-" + version + "." + artifact.extension

    def _request(self, url, failmsg, f):
        headers = {"User-Agent": self.user_agent}
        req = Request(url, None, headers)
        #print("user : " + str(self.username) + ' /  ' + str(self.password))         
        # if necessary add authentication header 
        if (self.username is not None and self.password is not None): 
            base64string = base64.encodestring('%s:%s' % (self.username, self.password)).replace('\n', '')
            req.add_header("Authorization", "Basic %s" % base64string)        
        try:
            response = urlopen(req)
        except HTTPError, e:
            print(failmsg + " because of " + str(e))
            print("Tried url " + url)
        except URLError, e:
            print(failmsg + " because of " + str(e))
            print("Tried url " + url)
        else:
            return f(response)


    def download(self, artifact, filename=None):
        filename = artifact.get_filename(filename)
        print("searching filename : " + str(filename))
        if not artifact.version:
            artifact = Artifact(artifact.groupId, artifact.artifactId, self._find_latest_version_available(artifact),
                artifact.classifier, artifact.extension)
        url = self.find_uri_for_artifact(artifact)
        print (url)
        if not self.verify_md5(filename, url + ".md5"):
            print("Downloading artifact " + str(artifact))
            response = self._request(url, "Failed to download artifact " + str(artifact), lambda r: r)
            if response:
                with open(filename, 'w') as f:
                    #f.write(response.read())
                    self._write_chunks(response, f, report_hook=self.chunk_report)
                print("Downloaded artifact %s to %s" % (artifact, filename))
                return True
            else:
                return False
        else:
            print("%s is already up to date" % artifact)
            return True

    def chunk_report(self, bytes_so_far, chunk_size, total_size):
        percent = float(bytes_so_far) / total_size
        percent = round(percent*100, 2)
        sys.stdout.write("Downloaded %d of %d bytes (%0.2f%%)\r" %
                 (bytes_so_far, total_size, percent))

        if bytes_so_far >= total_size:
            sys.stdout.write('\n')

    def _write_chunks(self, response, file, chunk_size=8192, report_hook=None):
        total_size = response.info().getheader('Content-Length').strip()
        total_size = int(total_size)
        bytes_so_far = 0

        while 1:
            chunk = response.read(chunk_size)
            bytes_so_far += len(chunk)

            if not chunk:
                break

            file.write(chunk)
            if report_hook:
                report_hook(bytes_so_far, chunk_size, total_size)

        return bytes_so_far

    def verify_md5(self, file, remote_md5):
        if not os.path.exists(file):
            return False
        else:
            local_md5 = self._local_md5(file)
            remote = self._request(remote_md5, "Failed to download MD5", lambda r: r.read())
            return local_md5 == remote

    def _local_md5(self, file):
        md5 = hashlib.md5()
        with open(file, 'rb') as f:
            for chunk in iter(lambda: f.read(8192), ''):
                md5.update(chunk)
        return md5.hexdigest()


def main():
    #print(str(sys.argv[1:]))
    try:
        #opts, args = getopt.getopt(sys.argv[1:], "m:", ["maven-server="])
        opts, args = getopt.getopt(sys.argv[1:], "m:u:p:", ["maven-server="])
        print("args : " + str(args))
    except getopt.GetoptError, err:
        # print help information and exit:
        print str(err) # will print something like "option -a not recognized"
        usage()
        sys.exit(2)

    if not len(args):
        print "No maven coordiantes supplied"
        usage()
        sys.exit(2)
    else:
        options = dict(opts)
        base = options.get("-m")
        if not base:
            base = options.get("--maven-server")
        if not base:
            base = "http://repo1.maven.org/maven2"
        
        username = options.get("-u")
        if not username:
            username = None
        password = options.get("-p")
        if not password:
            password = None
        artifact = Artifact.parse(args[0])
        
        downloader = MavenDownloader(base, username, password)

        filename = None
        if len(args) == 2:
            filename = args[1]

        if downloader.download(artifact, filename):
            sys.exit(0)
        else:
            usage()
            sys.exit(1)


def usage():
    print(__doc__ % {'program_name': os.path.basename(sys.argv[0])})

if __name__ == '__main__':
    main()
